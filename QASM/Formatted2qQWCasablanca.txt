q = QuantumRegister(7, 'q')
c = ClassicalRegister(2, 'c')
circ = QuantumCircuit(q, c)
circ.rz(pi/2, q[5])
circ.sx(q[5])
circ.rz(pi/2, q[5])
circ.cx(q[4],q[5])
circ.rz(7*pi/4, q[5])
circ.rz(pi/2, q[6])
circ.sx(q[6])
circ.rz(pi/2, q[6])
circ.cx(q[6],q[5])
circ.rz(pi/4, q[5])
circ.cx(q[4],q[5])
circ.rz(pi/4, q[4])
circ.rz(7*pi/4, q[5])
circ.cx(q[6],q[5])
circ.cx(q[5],q[4])
circ.cx(q[4],q[5])
circ.cx(q[5],q[4])
circ.rz(pi/4, q[4])
circ.cx(q[6],q[5])
circ.rz(7*pi/4, q[5])
circ.rz(pi/4, q[6])
circ.x(q[6])
circ.cx(q[6],q[5])
circ.cx(q[5],q[4])
circ.rz(7*pi/4, q[4])
circ.cx(q[5],q[4])
circ.cx(q[4],q[5])
circ.cx(q[5],q[4])
circ.cx(q[6],q[5])
circ.rz(pi/4, q[5])
circ.cx(q[4],q[5])
circ.rz(pi/4, q[4])
circ.rz(7*pi/4, q[5])
circ.cx(q[6],q[5])
circ.cx(q[5],q[4])
circ.cx(q[4],q[5])
circ.cx(q[5],q[4])
circ.rz(3*pi/4, q[4])
circ.sx(q[4])
circ.rz(pi/2, q[4])
circ.cx(q[6],q[5])
circ.rz(7*pi/4, q[5])
circ.rz(pi/4, q[6])
circ.cx(q[6],q[5])
circ.x(q[6])
circ.barrier()
circ.measure(q[5], c[0])
circ.measure(q[4], c[1])